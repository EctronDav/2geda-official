// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: 1MD9IiZ1p6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicPersonalDetails.module.css"; // plasmic-import: 1MD9IiZ1p6/css
import _2Geda11XT8XtazA5Pq from "./images/_2Geda11.png"; // plasmic-import: xT8XtazA5Pq/picture

export const PlasmicPersonalDetails__VariantProps = new Array();

export const PlasmicPersonalDetails__ArgProps = new Array();

function PlasmicPersonalDetails__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <div
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__pyNce)}
                displayHeight={"50px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"50px"}
                loading={"eager"}
                src={{
                  src: _2Geda11XT8XtazA5Pq,
                  fullWidth: 512,
                  fullHeight: 516,
                  aspectRatio: undefined
                }}
              />
            </div>

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fn5K
                )}
              >
                {"Basic profile details"}
              </div>

              <div
                data-plasmic-name={"mainCentered"}
                data-plasmic-override={overrides.mainCentered}
                className={classNames(projectcss.all, sty.mainCentered)}
              >
                <div
                  data-plasmic-name={"mainRight"}
                  data-plasmic-override={overrides.mainRight}
                  className={classNames(projectcss.all, sty.mainRight)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4EHqe
                    )}
                  >
                    {"Set your profile picture"}
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4MvOg)}
                    displayHeight={"200px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"200px"}
                    loading={"lazy"}
                    src={
                      "https://images.unsplash.com/photo-1511367461989-f85a21fda167?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1031&q=80"
                    }
                  />

                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__pNd0
                    )}
                  >
                    {"Select file"}
                  </button>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gGhGa
                    )}
                  >
                    {
                      "Images must clearly show your face, blurry images will not be approved!"
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Ez2H
                    )}
                  >
                    {
                      "Logos and designs that do not correlate with the profile data and purpose will not be approved also."
                    }
                  </div>
                </div>

                <div
                  data-plasmic-name={"mainLeft"}
                  data-plasmic-override={overrides.mainLeft}
                  className={classNames(projectcss.all, sty.mainLeft)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ly0Zv
                    )}
                  >
                    {"Fill Personal Details"}
                  </div>

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__jgVr1
                    )}
                    placeholder={"Email address"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__g9Ro
                    )}
                    placeholder={"Password"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__fS610
                    )}
                    placeholder={"first_name"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__wolwY
                    )}
                    placeholder={"surname"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__bzlcr
                    )}
                    placeholder={"username"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput__cmQwz
                    )}
                    placeholder={"city"}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <input
                    data-plasmic-name={"dateInput"}
                    data-plasmic-override={overrides.dateInput}
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.dateInput
                    )}
                    placeholder={"dob"}
                    size={1}
                    type={"date"}
                    value={""}
                  />

                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__dCejQ
                    )}
                  >
                    {"Save & Continue"}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "header",
    "main",
    "mainCentered",
    "mainRight",
    "mainLeft",
    "dateInput"
  ],

  container: [
    "container",
    "header",
    "main",
    "mainCentered",
    "mainRight",
    "mainLeft",
    "dateInput"
  ],

  header: ["header"],
  main: ["main", "mainCentered", "mainRight", "mainLeft", "dateInput"],
  mainCentered: ["mainCentered", "mainRight", "mainLeft", "dateInput"],
  mainRight: ["mainRight"],
  mainLeft: ["mainLeft", "dateInput"],
  dateInput: ["dateInput"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPersonalDetails__ArgProps,
          internalVariantPropNames: PlasmicPersonalDetails__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicPersonalDetails__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPersonalDetails";
  } else {
    func.displayName = `PlasmicPersonalDetails.${nodeName}`;
  }
  return func;
}

export const PlasmicPersonalDetails = Object.assign(
  // Top-level PlasmicPersonalDetails renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    header: makeNodeComponent("header"),
    main: makeNodeComponent("main"),
    mainCentered: makeNodeComponent("mainCentered"),
    mainRight: makeNodeComponent("mainRight"),
    mainLeft: makeNodeComponent("mainLeft"),
    dateInput: makeNodeComponent("dateInput"),
    // Metadata about props expected for PlasmicPersonalDetails
    internalVariantProps: PlasmicPersonalDetails__VariantProps,
    internalArgProps: PlasmicPersonalDetails__ArgProps
  }
);

export default PlasmicPersonalDetails;
/* prettier-ignore-end */
