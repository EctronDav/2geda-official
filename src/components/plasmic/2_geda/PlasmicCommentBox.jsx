// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: aD3gQOgm7t
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicCommentBox.module.css"; // plasmic-import: aD3gQOgm7t/css

export const PlasmicCommentBox__VariantProps = new Array();

export const PlasmicCommentBox__ArgProps = new Array();

function PlasmicCommentBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"comment"}
        data-plasmic-override={overrides.comment}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.comment
        )}
      >
        {"Comment"}
      </div>

      <input
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput ?? overrides.textbox}
        className={classNames(projectcss.all, projectcss.input, sty.textInput)}
        placeholder={"Enter your comment here"}
        size={1}
        type={"text"}
        value={""}
      />

      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(
          projectcss.all,
          projectcss.button,
          projectcss.__wab_text,
          sty.button
        )}
      >
        {"Comment"}
      </button>

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"See all comments..."}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "comment", "textInput", "textbox", "button", "text"],
  comment: ["comment"],
  textInput: ["textInput", "textbox"],
  button: ["button"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCommentBox__ArgProps,
          internalVariantPropNames: PlasmicCommentBox__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicCommentBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommentBox";
  } else {
    func.displayName = `PlasmicCommentBox.${nodeName}`;
  }
  return func;
}

export const PlasmicCommentBox = Object.assign(
  // Top-level PlasmicCommentBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    comment: makeNodeComponent("comment"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCommentBox
    internalVariantProps: PlasmicCommentBox__VariantProps,
    internalArgProps: PlasmicCommentBox__ArgProps
  }
);

export default PlasmicCommentBox;
/* prettier-ignore-end */
