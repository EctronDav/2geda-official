// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: 7WJwRnVAxlX
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicDashboardSidebar.module.css"; // plasmic-import: 7WJwRnVAxlX/css
import HouseIcon from "./icons/PlasmicIcon__House"; // plasmic-import: IdSuw-EtCN/icon
import UserCircleIcon from "./icons/PlasmicIcon__UserCircle"; // plasmic-import: EP5zGWwJ1X/icon
import Vector96Icon from "./icons/PlasmicIcon__Vector96"; // plasmic-import: 9n_rLIVux/icon
import Vector97Icon from "./icons/PlasmicIcon__Vector97"; // plasmic-import: Rb7mIprIrQ/icon
import BellIcon from "./icons/PlasmicIcon__Bell"; // plasmic-import: grfZD_Hnz9/icon
import SignOutIcon from "./icons/PlasmicIcon__SignOut"; // plasmic-import: PV-wOd8DPw/icon
import storefrontpngNMzMkO7Zz from "./images/storefrontpng.png"; // plasmic-import: nMzMkO7Zz/picture

export const PlasmicDashboardSidebar__VariantProps = new Array();

export const PlasmicDashboardSidebar__ArgProps = new Array();

function PlasmicDashboardSidebar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"group140"}
        data-plasmic-override={overrides.group140}
        hasGap={true}
        className={classNames(projectcss.all, sty.group140)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          hasGap={true}
          className={classNames(projectcss.all, sty.home)}
        >
          <HouseIcon
            className={classNames(projectcss.all, sty.svg___0IbnK)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lqBSm
            )}
          >
            {"Home"}
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"marketplace"}
          data-plasmic-override={overrides.marketplace}
          className={classNames(projectcss.all, sty.marketplace)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"32px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: storefrontpngNMzMkO7Zz,
              fullWidth: 32,
              fullHeight: 32,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__io0Xd
            )}
          >
            {"Business"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"profile"}
          data-plasmic-override={overrides.profile}
          hasGap={true}
          className={classNames(projectcss.all, sty.profile)}
        >
          <UserCircleIcon
            className={classNames(projectcss.all, sty.svg___2VOsH)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1EkWt
            )}
          >
            {"People"}
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"messages"}
          data-plasmic-override={overrides.messages}
          className={classNames(projectcss.all, sty.messages)}
        >
          <div
            data-plasmic-name={"messages2"}
            data-plasmic-override={overrides.messages2}
            className={classNames(projectcss.all, sty.messages2)}
          >
            <Vector96Icon
              className={classNames(projectcss.all, sty.svg__ieLkL)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ctDcZ
              )}
            >
              {"Messages"}
            </div>
          </div>

          <Vector97Icon
            className={classNames(projectcss.all, sty.svg__oejcD)}
            role={"img"}
          />

          <Vector97Icon
            className={classNames(projectcss.all, sty.svg__vYst)}
            role={"img"}
          />

          <Vector97Icon
            className={classNames(projectcss.all, sty.svg___3IxSq)}
            role={"img"}
          />
        </div>

        <div
          data-plasmic-name={"nofitication"}
          data-plasmic-override={overrides.nofitication}
          className={classNames(projectcss.all, sty.nofitication)}
        >
          <BellIcon
            className={classNames(projectcss.all, sty.svg__fvf1X)}
            role={"img"}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a2Qt5
            )}
          >
            {"Notification"}
          </div>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"group245"}
        data-plasmic-override={overrides.group245}
        hasGap={true}
        className={classNames(projectcss.all, sty.group245)}
      >
        <SignOutIcon
          className={classNames(projectcss.all, sty.svg__xBiDw)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oQm8Y
          )}
        >
          {"Sign out"}
        </div>
      </p.Stack>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "group140",
    "home",
    "marketplace",
    "img",
    "profile",
    "messages",
    "messages2",
    "nofitication",
    "group245"
  ],

  group140: [
    "group140",
    "home",
    "marketplace",
    "img",
    "profile",
    "messages",
    "messages2",
    "nofitication"
  ],

  home: ["home"],
  marketplace: ["marketplace", "img"],
  img: ["img"],
  profile: ["profile"],
  messages: ["messages", "messages2"],
  messages2: ["messages2"],
  nofitication: ["nofitication"],
  group245: ["group245"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboardSidebar__ArgProps,
          internalVariantPropNames: PlasmicDashboardSidebar__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicDashboardSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardSidebar";
  } else {
    func.displayName = `PlasmicDashboardSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardSidebar = Object.assign(
  // Top-level PlasmicDashboardSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group140: makeNodeComponent("group140"),
    home: makeNodeComponent("home"),
    marketplace: makeNodeComponent("marketplace"),
    img: makeNodeComponent("img"),
    profile: makeNodeComponent("profile"),
    messages: makeNodeComponent("messages"),
    messages2: makeNodeComponent("messages2"),
    nofitication: makeNodeComponent("nofitication"),
    group245: makeNodeComponent("group245"),
    // Metadata about props expected for PlasmicDashboardSidebar
    internalVariantProps: PlasmicDashboardSidebar__VariantProps,
    internalArgProps: PlasmicDashboardSidebar__ArgProps
  }
);

export default PlasmicDashboardSidebar;
/* prettier-ignore-end */
