// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: eh0aQHUlPV
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderModal from "../../HeaderModal"; // plasmic-import: dngvs-_okm/component
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicForgotPassword.module.css"; // plasmic-import: eh0aQHUlPV/css

export const PlasmicForgotPassword__VariantProps = new Array();

export const PlasmicForgotPassword__ArgProps = new Array();

function PlasmicForgotPassword__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <HeaderModal
              data-plasmic-name={"headerModal"}
              data-plasmic-override={overrides.headerModal}
              className={classNames("__wab_instance", sty.headerModal)}
            />

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"left"}
                  data-plasmic-override={overrides.left}
                  className={classNames(projectcss.all, sty.left)}
                />
              ) : null}

              <div
                data-plasmic-name={"right"}
                data-plasmic-override={overrides.right}
                className={classNames(projectcss.all, sty.right)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8REJz
                  )}
                >
                  {"Reset password"}
                </div>

                <input
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={
                    overrides.textInput ?? overrides.textbox
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textInput
                  )}
                  placeholder={"Input email address"}
                  size={1}
                  type={"text"}
                  value={""}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oqFck
                  )}
                >
                  {"Sign in here"}
                </div>

                <button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Reset Password"
                    : "Reset Password"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "headerModal",
    "main",
    "left",
    "right",
    "textInput",
    "textbox",
    "button"
  ],

  container: [
    "container",
    "headerModal",
    "main",
    "left",
    "right",
    "textInput",
    "textbox",
    "button"
  ],

  headerModal: ["headerModal"],
  main: ["main", "left", "right", "textInput", "textbox", "button"],
  left: ["left"],
  right: ["right", "textInput", "textbox", "button"],
  textInput: ["textInput", "textbox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicForgotPassword__ArgProps,
          internalVariantPropNames: PlasmicForgotPassword__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicForgotPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicForgotPassword";
  } else {
    func.displayName = `PlasmicForgotPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicForgotPassword = Object.assign(
  // Top-level PlasmicForgotPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    headerModal: makeNodeComponent("headerModal"),
    main: makeNodeComponent("main"),
    left: makeNodeComponent("left"),
    right: makeNodeComponent("right"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicForgotPassword
    internalVariantProps: PlasmicForgotPassword__VariantProps,
    internalArgProps: PlasmicForgotPassword__ArgProps
  }
);

export default PlasmicForgotPassword;
/* prettier-ignore-end */
