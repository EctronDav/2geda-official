// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: 5K0H0lW6HF
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicMessagesBox.module.css"; // plasmic-import: 5K0H0lW6HF/css
import Line3Icon from "./icons/PlasmicIcon__Line3"; // plasmic-import: 048klyCSi/icon
import ellipse36MwUq7LJfJy from "./images/ellipse36.svg"; // plasmic-import: MWUq7LJfJY/picture

export const PlasmicMessagesBox__VariantProps = new Array();

export const PlasmicMessagesBox__ArgProps = new Array();

function PlasmicMessagesBox__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"group298"}
        data-plasmic-override={overrides.group298}
        className={classNames(projectcss.all, sty.group298)}
      >
        <div
          data-plasmic-name={"rectangle209"}
          data-plasmic-override={overrides.rectangle209}
          className={classNames(projectcss.all, sty.rectangle209)}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nZe1Z
          )}
        >
          {"Messages"}
        </div>
      </div>

      <div
        data-plasmic-name={"group148"}
        data-plasmic-override={overrides.group148}
        className={classNames(projectcss.all, sty.group148)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vvg6Z
          )}
        >
          {"Abraham Adesanya"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vEllC
          )}
        >
          {"How was your flight Joe, i couldnt text last night"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5S9PZ
          )}
        >
          {"12:00"}
        </div>

        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"44px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"43px"}
          loading={"lazy"}
          src={{
            src: ellipse36MwUq7LJfJy,
            fullWidth: 43,
            fullHeight: 44,
            aspectRatio: 0.977273
          }}
        />
      </div>

      <Line3Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "group298", "rectangle209", "group148", "img", "svg"],
  group298: ["group298", "rectangle209"],
  rectangle209: ["rectangle209"],
  group148: ["group148", "img"],
  img: ["img"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMessagesBox__ArgProps,
          internalVariantPropNames: PlasmicMessagesBox__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicMessagesBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMessagesBox";
  } else {
    func.displayName = `PlasmicMessagesBox.${nodeName}`;
  }
  return func;
}

export const PlasmicMessagesBox = Object.assign(
  // Top-level PlasmicMessagesBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group298: makeNodeComponent("group298"),
    rectangle209: makeNodeComponent("rectangle209"),
    group148: makeNodeComponent("group148"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicMessagesBox
    internalVariantProps: PlasmicMessagesBox__VariantProps,
    internalArgProps: PlasmicMessagesBox__ArgProps
  }
);

export default PlasmicMessagesBox;
/* prettier-ignore-end */
