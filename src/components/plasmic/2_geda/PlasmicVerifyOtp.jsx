// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: Z2QvAn3eZE
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ModalLeft from "../../ModalLeft"; // plasmic-import: DFjZBtsg3Y/component
import ModalRight from "../../ModalRight"; // plasmic-import: wTzuuaSZFJ/component
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicVerifyOtp.module.css"; // plasmic-import: Z2QvAn3eZE/css
import _2Geda229BS7EcahJr3 from "./images/_2Geda22.png"; // plasmic-import: 9bS7EcahJr3/picture

export const PlasmicVerifyOtp__VariantProps = new Array();

export const PlasmicVerifyOtp__ArgProps = new Array();

function PlasmicVerifyOtp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"80px"}
                loading={"lazy"}
                src={{
                  src: _2Geda229BS7EcahJr3,
                  fullWidth: 508,
                  fullHeight: 512,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Almost there..."}
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <ModalLeft
                  data-plasmic-name={"modalLeft"}
                  data-plasmic-override={overrides.modalLeft}
                  className={classNames("__wab_instance", sty.modalLeft)}
                />
              ) : null}

              <ModalRight
                data-plasmic-name={"modalRight"}
                data-plasmic-override={overrides.modalRight}
                className={classNames("__wab_instance", sty.modalRight)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "header",
    "img",
    "text",
    "main",
    "modalLeft",
    "modalRight"
  ],

  container: [
    "container",
    "header",
    "img",
    "text",
    "main",
    "modalLeft",
    "modalRight"
  ],

  header: ["header", "img", "text"],
  img: ["img"],
  text: ["text"],
  main: ["main", "modalLeft", "modalRight"],
  modalLeft: ["modalLeft"],
  modalRight: ["modalRight"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicVerifyOtp__ArgProps,
          internalVariantPropNames: PlasmicVerifyOtp__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicVerifyOtp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVerifyOtp";
  } else {
    func.displayName = `PlasmicVerifyOtp.${nodeName}`;
  }
  return func;
}

export const PlasmicVerifyOtp = Object.assign(
  // Top-level PlasmicVerifyOtp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    main: makeNodeComponent("main"),
    modalLeft: makeNodeComponent("modalLeft"),
    modalRight: makeNodeComponent("modalRight"),
    // Metadata about props expected for PlasmicVerifyOtp
    internalVariantProps: PlasmicVerifyOtp__VariantProps,
    internalArgProps: PlasmicVerifyOtp__ArgProps
  }
);

export default PlasmicVerifyOtp;
/* prettier-ignore-end */
