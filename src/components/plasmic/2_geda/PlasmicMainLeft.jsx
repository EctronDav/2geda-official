// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: AuD_LYJAI4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicMainLeft.module.css"; // plasmic-import: AuD_LYJAI4/css
import _2Geda229BS7EcahJr3 from "./images/_2Geda22.png"; // plasmic-import: 9bS7EcahJr3/picture

export const PlasmicMainLeft__VariantProps = new Array();

export const PlasmicMainLeft__ArgProps = new Array();

function PlasmicMainLeft__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"106px"}
        displayMaxHeight={"none"}
        displayMaxWidth={"100%"}
        displayMinHeight={"0"}
        displayMinWidth={"0"}
        displayWidth={"104px"}
        loading={"lazy"}
        src={{
          src: _2Geda229BS7EcahJr3,
          fullWidth: 508,
          fullHeight: 512,
          aspectRatio: undefined
        }}
      />

      <h2
        data-plasmic-name={"h2"}
        data-plasmic-override={overrides.h2}
        className={classNames(
          projectcss.all,
          projectcss.h2,
          projectcss.__wab_text,
          sty.h2
        )}
      >
        {"Unlock Business directories and Personal Potentials"}
      </h2>

      <blockquote
        data-plasmic-name={"blockquote"}
        data-plasmic-override={overrides.blockquote}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.blockquote
        )}
      >
        {
          "Meet prospective clients and vendors for your next product or service needs"
        }
      </blockquote>

      <button
        className={classNames(
          projectcss.all,
          projectcss.button,
          projectcss.__wab_text,
          sty.button___2J9A
        )}
      >
        {hasVariant(globalVariants, "screen", "mobile")
          ? "Sign in"
          : hasVariant(globalVariants, "screen", "tablet")
          ? "Get started"
          : "Get started"}
      </button>

      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <button
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button__fkQWf
          )}
        >
          {"Sign up"}
        </button>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h2", "blockquote"],
  img: ["img"],
  h2: ["h2"],
  blockquote: ["blockquote"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicMainLeft__ArgProps,
          internalVariantPropNames: PlasmicMainLeft__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicMainLeft__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainLeft";
  } else {
    func.displayName = `PlasmicMainLeft.${nodeName}`;
  }
  return func;
}

export const PlasmicMainLeft = Object.assign(
  // Top-level PlasmicMainLeft renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h2: makeNodeComponent("h2"),
    blockquote: makeNodeComponent("blockquote"),
    // Metadata about props expected for PlasmicMainLeft
    internalVariantProps: PlasmicMainLeft__VariantProps,
    internalArgProps: PlasmicMainLeft__ArgProps
  }
);

export default PlasmicMainLeft;
/* prettier-ignore-end */
