// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: 5sVX8TQhxB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: 5sVX8TQhxB/css
import _2Geda11XT8XtazA5Pq from "./images/_2Geda11.png"; // plasmic-import: xT8XtazA5Pq/picture
import maskGrouppngXE1YnDtN from "./images/maskGrouppng.png"; // plasmic-import: xE1ynDtN-/picture
import imagepngCFPpvc8S from "./images/imagepng.png"; // plasmic-import: C_fPPVC8s/picture
import videoCamerapngAsa6YwWaw from "./images/videoCamerapng.png"; // plasmic-import: asa6YWWaw/picture
import smileyStickerpngJbiUkXsIu from "./images/smileyStickerpng.png"; // plasmic-import: jbiUkXsIu/picture

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array();

function PlasmicDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <div
                data-plasmic-name={"sidebar"}
                data-plasmic-override={overrides.sidebar}
                className={classNames(projectcss.all, sty.sidebar)}
              >
                <div
                  data-plasmic-name={"navContainer"}
                  data-plasmic-override={overrides.navContainer}
                  className={classNames(projectcss.all, sty.navContainer)}
                >
                  {true ? (
                    <div
                      data-plasmic-name={"home"}
                      data-plasmic-override={overrides.home}
                      className={classNames(projectcss.all, sty.home)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tm6AN
                          )}
                        >
                          {"Home"}
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      data-plasmic-name={"business"}
                      data-plasmic-override={overrides.business}
                      className={classNames(projectcss.all, sty.business)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9VOiN
                        )}
                      >
                        {"Business"}
                      </div>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      data-plasmic-name={"people"}
                      data-plasmic-override={overrides.people}
                      className={classNames(projectcss.all, sty.people)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ugnJr
                        )}
                      >
                        {"People"}
                      </div>
                    </div>
                  ) : null}

                  <div
                    data-plasmic-name={"messages"}
                    data-plasmic-override={overrides.messages}
                    className={classNames(projectcss.all, sty.messages)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lxCx
                      )}
                    >
                      {"Messages"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"notifications"}
                    data-plasmic-override={overrides.notifications}
                    className={classNames(projectcss.all, sty.notifications)}
                  >
                    <div
                      data-plasmic-name={"notification"}
                      data-plasmic-override={overrides.notification}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.notification
                      )}
                    >
                      {"Notification"}
                    </div>
                  </div>
                </div>

                <div
                  data-plasmic-name={"signOut"}
                  data-plasmic-override={overrides.signOut}
                  className={classNames(projectcss.all, sty.signOut)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zFqSd
                    )}
                  >
                    {"Sign out"}
                  </div>
                </div>
              </div>
            ) : null}

            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames(projectcss.all, sty.header)}
              >
                <div
                  data-plasmic-name={"headerLeft"}
                  data-plasmic-override={overrides.headerLeft}
                  className={classNames(projectcss.all, sty.headerLeft)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__iqp23)}
                    displayHeight={"60px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"60px"}
                    loading={"lazy"}
                    src={{
                      src: _2Geda11XT8XtazA5Pq,
                      fullWidth: 512,
                      fullHeight: 516,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div
                  data-plasmic-name={"headerRight"}
                  data-plasmic-override={overrides.headerRight}
                  className={classNames(projectcss.all, sty.headerRight)}
                >
                  <input
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={
                      overrides.textInput ?? overrides.textbox
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.input,
                      sty.textInput
                    )}
                    placeholder={"Search "}
                    size={1}
                    type={"text"}
                    value={""}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__jjmL3)}
                    displayHeight={"50px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"50px"}
                    loading={"lazy"}
                    src={{
                      src: maskGrouppngXE1YnDtN,
                      fullWidth: 239,
                      fullHeight: 418,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"contentMain"}
                data-plasmic-override={overrides.contentMain}
                className={classNames(projectcss.all, sty.contentMain)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <div
                    data-plasmic-name={"random"}
                    data-plasmic-override={overrides.random}
                    className={classNames(projectcss.all, sty.random)}
                  />
                ) : null}

                <div
                  data-plasmic-name={"fixedContainer"}
                  data-plasmic-override={overrides.fixedContainer}
                  className={classNames(projectcss.all, sty.fixedContainer)}
                >
                  <div
                    data-plasmic-name={"contentMainLeft"}
                    data-plasmic-override={overrides.contentMainLeft}
                    className={classNames(projectcss.all, sty.contentMainLeft)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"uploadBox"}
                      data-plasmic-override={overrides.uploadBox}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.uploadBox)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9I7Kq
                        )}
                      >
                        {"Post on feed"}
                      </div>

                      <textarea
                        data-plasmic-name={"textarea"}
                        data-plasmic-override={overrides.textarea}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.textarea
                        )}
                        placeholder={"write up to 1,000 words"}
                        value={""}
                      />

                      <div
                        data-plasmic-name={"uploadButtons"}
                        data-plasmic-override={overrides.uploadButtons}
                        className={classNames(
                          projectcss.all,
                          sty.uploadButtons
                        )}
                      >
                        <div
                          data-plasmic-name={"uploadLeft"}
                          data-plasmic-override={overrides.uploadLeft}
                          className={classNames(projectcss.all, sty.uploadLeft)}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___4HEg0)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: imagepngCFPpvc8S,
                              fullWidth: 24,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__hkcf1)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: videoCamerapngAsa6YwWaw,
                              fullWidth: 24,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />

                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__hUfXx)}
                            displayHeight={"auto"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"auto"}
                            loading={"lazy"}
                            src={{
                              src: smileyStickerpngJbiUkXsIu,
                              fullWidth: 24,
                              fullHeight: 25,
                              aspectRatio: undefined
                            }}
                          />
                        </div>

                        <div
                          data-plasmic-name={"uploadRight"}
                          data-plasmic-override={overrides.uploadRight}
                          className={classNames(
                            projectcss.all,
                            sty.uploadRight
                          )}
                        >
                          <button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              projectcss.__wab_text,
                              sty.button
                            )}
                          >
                            {"Post"}
                          </button>
                        </div>
                      </div>
                    </p.Stack>

                    <div
                      data-plasmic-name={"postBox"}
                      data-plasmic-override={overrides.postBox}
                      className={classNames(projectcss.all, sty.postBox)}
                    >
                      <div
                        data-plasmic-name={"postTop"}
                        data-plasmic-override={overrides.postTop}
                        className={classNames(projectcss.all, sty.postTop)}
                      >
                        <div
                          data-plasmic-name={"postTopLeft"}
                          data-plasmic-override={overrides.postTopLeft}
                          className={classNames(
                            projectcss.all,
                            sty.postTopLeft
                          )}
                        >
                          <p.PlasmicImg
                            data-plasmic-name={"postUserPic"}
                            data-plasmic-override={overrides.postUserPic}
                            alt={""}
                            className={classNames(sty.postUserPic)}
                            displayHeight={"50px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"100%"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"50px"}
                            loading={"lazy"}
                            src={{
                              src: maskGrouppngXE1YnDtN,
                              fullWidth: 239,
                              fullHeight: 418,
                              aspectRatio: undefined
                            }}
                          />
                        </div>

                        <div
                          data-plasmic-name={"postTopRight"}
                          data-plasmic-override={overrides.postTopRight}
                          className={classNames(
                            projectcss.all,
                            sty.postTopRight
                          )}
                        >
                          <div
                            data-plasmic-name={"userInfo"}
                            data-plasmic-override={overrides.userInfo}
                            className={classNames(projectcss.all, sty.userInfo)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5W4P
                              )}
                            >
                              {"Israel David"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qGsn
                              )}
                            >
                              {"software developer"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lIwrW
                              )}
                            >
                              {"Lagos, Nigeria"}
                            </div>
                          </div>

                          <div
                            data-plasmic-name={"postDate"}
                            data-plasmic-override={overrides.postDate}
                            className={classNames(projectcss.all, sty.postDate)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jfjb3
                              )}
                            >
                              {"1hr ago"}
                            </div>
                          </div>
                        </div>
                      </div>

                      <div
                        data-plasmic-name={"postMid"}
                        data-plasmic-override={overrides.postMid}
                        className={classNames(projectcss.all, sty.postMid)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pIp8U
                          )}
                        >
                          {
                            "This is the Opportunity to jon the world Leading Tech professionals in 2022. All you need do is to register with the link below"
                          }
                        </div>

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___8BgaS)}
                          displayHeight={"400px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"90%"}
                          loading={"lazy"}
                          src={{
                            src: maskGrouppngXE1YnDtN,
                            fullWidth: 239,
                            fullHeight: 418,
                            aspectRatio: undefined
                          }}
                        />
                      </div>

                      <div
                        data-plasmic-name={"postBottom"}
                        data-plasmic-override={overrides.postBottom}
                        className={classNames(projectcss.all, sty.postBottom)}
                      />
                    </div>
                  </div>
                </div>

                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : true
                ) ? (
                  <div
                    data-plasmic-name={"contentMainRight"}
                    data-plasmic-override={overrides.contentMainRight}
                    className={classNames(projectcss.all, sty.contentMainRight)}
                  />
                ) : null}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"bottomNav"}
                  data-plasmic-override={overrides.bottomNav}
                  className={classNames(projectcss.all, sty.bottomNav)}
                />
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "sidebar",
    "navContainer",
    "home",
    "business",
    "people",
    "messages",
    "notifications",
    "notification",
    "signOut",
    "content",
    "header",
    "headerLeft",
    "headerRight",
    "textInput",
    "textbox",
    "contentMain",
    "random",
    "fixedContainer",
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom",
    "contentMainRight",
    "bottomNav"
  ],

  container: [
    "container",
    "sidebar",
    "navContainer",
    "home",
    "business",
    "people",
    "messages",
    "notifications",
    "notification",
    "signOut",
    "content",
    "header",
    "headerLeft",
    "headerRight",
    "textInput",
    "textbox",
    "contentMain",
    "random",
    "fixedContainer",
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom",
    "contentMainRight",
    "bottomNav"
  ],

  sidebar: [
    "sidebar",
    "navContainer",
    "home",
    "business",
    "people",
    "messages",
    "notifications",
    "notification",
    "signOut"
  ],

  navContainer: [
    "navContainer",
    "home",
    "business",
    "people",
    "messages",
    "notifications",
    "notification"
  ],

  home: ["home"],
  business: ["business"],
  people: ["people"],
  messages: ["messages"],
  notifications: ["notifications", "notification"],
  notification: ["notification"],
  signOut: ["signOut"],
  content: [
    "content",
    "header",
    "headerLeft",
    "headerRight",
    "textInput",
    "textbox",
    "contentMain",
    "random",
    "fixedContainer",
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom",
    "contentMainRight",
    "bottomNav"
  ],

  header: ["header", "headerLeft", "headerRight", "textInput", "textbox"],
  headerLeft: ["headerLeft"],
  headerRight: ["headerRight", "textInput", "textbox"],
  textInput: ["textInput", "textbox"],
  contentMain: [
    "contentMain",
    "random",
    "fixedContainer",
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom",
    "contentMainRight"
  ],

  random: ["random"],
  fixedContainer: [
    "fixedContainer",
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom"
  ],

  contentMainLeft: [
    "contentMainLeft",
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button",
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom"
  ],

  uploadBox: [
    "uploadBox",
    "textarea",
    "uploadButtons",
    "uploadLeft",
    "uploadRight",
    "button"
  ],

  textarea: ["textarea"],
  uploadButtons: ["uploadButtons", "uploadLeft", "uploadRight", "button"],
  uploadLeft: ["uploadLeft"],
  uploadRight: ["uploadRight", "button"],
  button: ["button"],
  postBox: [
    "postBox",
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate",
    "postMid",
    "postBottom"
  ],

  postTop: [
    "postTop",
    "postTopLeft",
    "postUserPic",
    "postTopRight",
    "userInfo",
    "postDate"
  ],

  postTopLeft: ["postTopLeft", "postUserPic"],
  postUserPic: ["postUserPic"],
  postTopRight: ["postTopRight", "userInfo", "postDate"],
  userInfo: ["userInfo"],
  postDate: ["postDate"],
  postMid: ["postMid"],
  postBottom: ["postBottom"],
  contentMainRight: ["contentMainRight"],
  bottomNav: ["bottomNav"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    sidebar: makeNodeComponent("sidebar"),
    navContainer: makeNodeComponent("navContainer"),
    home: makeNodeComponent("home"),
    business: makeNodeComponent("business"),
    people: makeNodeComponent("people"),
    messages: makeNodeComponent("messages"),
    notifications: makeNodeComponent("notifications"),
    notification: makeNodeComponent("notification"),
    signOut: makeNodeComponent("signOut"),
    content: makeNodeComponent("content"),
    header: makeNodeComponent("header"),
    headerLeft: makeNodeComponent("headerLeft"),
    headerRight: makeNodeComponent("headerRight"),
    textInput: makeNodeComponent("textInput"),
    contentMain: makeNodeComponent("contentMain"),
    random: makeNodeComponent("random"),
    fixedContainer: makeNodeComponent("fixedContainer"),
    contentMainLeft: makeNodeComponent("contentMainLeft"),
    uploadBox: makeNodeComponent("uploadBox"),
    textarea: makeNodeComponent("textarea"),
    uploadButtons: makeNodeComponent("uploadButtons"),
    uploadLeft: makeNodeComponent("uploadLeft"),
    uploadRight: makeNodeComponent("uploadRight"),
    button: makeNodeComponent("button"),
    postBox: makeNodeComponent("postBox"),
    postTop: makeNodeComponent("postTop"),
    postTopLeft: makeNodeComponent("postTopLeft"),
    postUserPic: makeNodeComponent("postUserPic"),
    postTopRight: makeNodeComponent("postTopRight"),
    userInfo: makeNodeComponent("userInfo"),
    postDate: makeNodeComponent("postDate"),
    postMid: makeNodeComponent("postMid"),
    postBottom: makeNodeComponent("postBottom"),
    contentMainRight: makeNodeComponent("contentMainRight"),
    bottomNav: makeNodeComponent("bottomNav"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
