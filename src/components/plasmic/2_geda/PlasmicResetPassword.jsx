// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: Mxn4L60z0Q
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicResetPassword.module.css"; // plasmic-import: Mxn4L60z0Q/css
import _2Geda21PngXbZrXrHk from "./images/_2Geda21Png.png"; // plasmic-import: xbZrXR_Hk/picture

export const PlasmicResetPassword__VariantProps = new Array();

export const PlasmicResetPassword__ArgProps = new Array();

function PlasmicResetPassword__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames(projectcss.all, sty.container)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"90px"}
                loading={"lazy"}
                src={{
                  src: _2Geda21PngXbZrXrHk,
                  fullWidth: 80,
                  fullHeight: 80,
                  aspectRatio: undefined
                }}
              />

              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i4LCr
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Reset Password"
                    : "Set new password"}
                </div>
              ) : null}
            </p.Stack>

            <div
              data-plasmic-name={"main"}
              data-plasmic-override={overrides.main}
              className={classNames(projectcss.all, sty.main)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"mainLeft"}
                  data-plasmic-override={overrides.mainLeft}
                  className={classNames(projectcss.all, sty.mainLeft)}
                />
              ) : null}

              <div
                data-plasmic-name={"mainRight"}
                data-plasmic-override={overrides.mainRight}
                className={classNames(projectcss.all, sty.mainRight)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lSkQ
                  )}
                >
                  {"Input Password"}
                </div>

                <input
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textInput__o7Q0D
                  )}
                  placeholder={"Password"}
                  size={1}
                  type={"text"}
                  value={""}
                />

                <input
                  className={classNames(
                    projectcss.all,
                    projectcss.input,
                    sty.textInput__ni40S
                  )}
                  placeholder={"Confirm Password"}
                  size={1}
                  type={"text"}
                  value={""}
                />

                <button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button
                  )}
                >
                  {"Done"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "header",
    "img",
    "main",
    "mainLeft",
    "mainRight",
    "button"
  ],

  container: [
    "container",
    "header",
    "img",
    "main",
    "mainLeft",
    "mainRight",
    "button"
  ],

  header: ["header", "img"],
  img: ["img"],
  main: ["main", "mainLeft", "mainRight", "button"],
  mainLeft: ["mainLeft"],
  mainRight: ["mainRight", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicResetPassword__ArgProps,
          internalVariantPropNames: PlasmicResetPassword__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicResetPassword__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResetPassword";
  } else {
    func.displayName = `PlasmicResetPassword.${nodeName}`;
  }
  return func;
}

export const PlasmicResetPassword = Object.assign(
  // Top-level PlasmicResetPassword renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    header: makeNodeComponent("header"),
    img: makeNodeComponent("img"),
    main: makeNodeComponent("main"),
    mainLeft: makeNodeComponent("mainLeft"),
    mainRight: makeNodeComponent("mainRight"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicResetPassword
    internalVariantProps: PlasmicResetPassword__VariantProps,
    internalArgProps: PlasmicResetPassword__ArgProps
  }
);

export default PlasmicResetPassword;
/* prettier-ignore-end */
