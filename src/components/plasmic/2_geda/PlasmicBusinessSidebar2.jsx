// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: q5yCu6U9uj
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BusinessSidebar from "../../BusinessSidebar"; // plasmic-import: 0r3xSegb8up/component
import { useScreenVariants as useScreenVariantsgcBBykOvh4Vq } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gcB_bykOvh4VQ/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicBusinessSidebar2.module.css"; // plasmic-import: q5yCu6U9uj/css
import SignOutIcon from "./icons/PlasmicIcon__SignOut"; // plasmic-import: PV-wOd8DPw/icon

export const PlasmicBusinessSidebar2__VariantProps = new Array();

export const PlasmicBusinessSidebar2__ArgProps = new Array();

function PlasmicBusinessSidebar2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgcBBykOvh4Vq()
  });

  return (hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
        <div
          data-plasmic-name={"group246"}
          data-plasmic-override={overrides.group246}
          className={classNames(projectcss.all, sty.group246)}
        >
          {false ? (
            <div
              data-plasmic-name={"group214"}
              data-plasmic-override={overrides.group214}
              className={classNames(projectcss.all, sty.group214)}
            >
              <SignOutIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Sign out"}
              </div>
            </div>
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <BusinessSidebar
              data-plasmic-name={"businessSidebar"}
              data-plasmic-override={overrides.businessSidebar}
              className={classNames("__wab_instance", sty.businessSidebar)}
            />
          ) : null}
        </div>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "group246", "group214", "svg", "text", "businessSidebar"],
  group246: ["group246", "group214", "svg", "text", "businessSidebar"],
  group214: ["group214", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  businessSidebar: ["businessSidebar"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBusinessSidebar2__ArgProps,
          internalVariantPropNames: PlasmicBusinessSidebar2__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicBusinessSidebar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBusinessSidebar2";
  } else {
    func.displayName = `PlasmicBusinessSidebar2.${nodeName}`;
  }
  return func;
}

export const PlasmicBusinessSidebar2 = Object.assign(
  // Top-level PlasmicBusinessSidebar2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group246: makeNodeComponent("group246"),
    group214: makeNodeComponent("group214"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    businessSidebar: makeNodeComponent("businessSidebar"),
    // Metadata about props expected for PlasmicBusinessSidebar2
    internalVariantProps: PlasmicBusinessSidebar2__VariantProps,
    internalArgProps: PlasmicBusinessSidebar2__ArgProps
  }
);

export default PlasmicBusinessSidebar2;
/* prettier-ignore-end */
