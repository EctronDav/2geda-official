// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: wTzuuaSZFJ
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicModalRight.module.css"; // plasmic-import: wTzuuaSZFJ/css

export const PlasmicModalRight__VariantProps = new Array();

export const PlasmicModalRight__ArgProps = new Array();

function PlasmicModalRight__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__gZaIe
        )}
      >
        {"we sent a 6 digit code to your email"}
      </div>

      <input
        data-plasmic-name={"textInput"}
        data-plasmic-override={overrides.textInput ?? overrides.textbox}
        className={classNames(projectcss.all, projectcss.input, sty.textInput)}
        placeholder={"* * * * * * "}
        size={1}
        type={"text"}
        value={""}
      />

      <div className={classNames(projectcss.all, sty.freeBox__xQtxz)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gMnKw
          )}
        >
          {"Resend"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jmtTa
          )}
        >
          {"00:60"}
        </div>
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__pSwr6)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__fC5E9
          )}
        >
          {"Step 2"}
        </div>

        <button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames(
            projectcss.all,
            projectcss.button,
            projectcss.__wab_text,
            sty.button
          )}
        >
          {"Verify"}
        </button>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "textbox", "button"],
  textInput: ["textInput", "textbox"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicModalRight__ArgProps,
          internalVariantPropNames: PlasmicModalRight__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicModalRight__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalRight";
  } else {
    func.displayName = `PlasmicModalRight.${nodeName}`;
  }
  return func;
}

export const PlasmicModalRight = Object.assign(
  // Top-level PlasmicModalRight renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicModalRight
    internalVariantProps: PlasmicModalRight__VariantProps,
    internalArgProps: PlasmicModalRight__ArgProps
  }
);

export default PlasmicModalRight;
/* prettier-ignore-end */
