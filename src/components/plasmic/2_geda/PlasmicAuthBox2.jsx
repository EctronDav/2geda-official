// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ovjdXhydzXTq3Bc7u9wCpt
// Component: CBPLLuL4Oc
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_2_geda.module.css"; // plasmic-import: ovjdXhydzXTq3Bc7u9wCpt/projectcss
import sty from "./PlasmicAuthBox2.module.css"; // plasmic-import: CBPLLuL4Oc/css

export const PlasmicAuthBox2__VariantProps = new Array();

export const PlasmicAuthBox2__ArgProps = new Array();

function PlasmicAuthBox2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"authContainer"}
        data-plasmic-override={overrides.authContainer}
        className={classNames(projectcss.all, sty.authContainer)}
      >
        <div
          data-plasmic-name={"authForm"}
          data-plasmic-override={overrides.authForm}
          className={classNames(projectcss.all, sty.authForm)}
        >
          <h4
            data-plasmic-name={"h4"}
            data-plasmic-override={overrides.h4}
            className={classNames(
              projectcss.all,
              projectcss.h4,
              projectcss.__wab_text,
              sty.h4
            )}
          >
            {"Become a member in few clicks"}
          </h4>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__a0GpN
            )}
          >
            {"Sign up with email"}
          </div>

          <input
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput ?? overrides.textbox}
            className={classNames(
              projectcss.all,
              projectcss.input,
              sty.textInput
            )}
            placeholder={"Input email address"}
            size={1}
            type={"text"}
            value={""}
          />

          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__gtflv
            )}
          >
            {"we'll verify the email provided to be sure it belongs to you"}
          </a>

          <button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames(
              projectcss.all,
              projectcss.button,
              sty.button
            )}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sSczw
              )}
            >
              {"Sign in"}
            </div>
          </button>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c3R4
              )}
            >
              {"Already a Member?"}
            </div>

            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__vIpj
              )}
            >
              {"Sign in"}
            </a>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "authContainer",
    "authForm",
    "h4",
    "textInput",
    "textbox",
    "button",
    "freeBox"
  ],

  authContainer: [
    "authContainer",
    "authForm",
    "h4",
    "textInput",
    "textbox",
    "button",
    "freeBox"
  ],

  authForm: ["authForm", "h4", "textInput", "textbox", "button", "freeBox"],
  h4: ["h4"],
  textInput: ["textInput", "textbox"],
  button: ["button"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuthBox2__ArgProps,
          internalVariantPropNames: PlasmicAuthBox2__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicAuthBox2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthBox2";
  } else {
    func.displayName = `PlasmicAuthBox2.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthBox2 = Object.assign(
  // Top-level PlasmicAuthBox2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    authContainer: makeNodeComponent("authContainer"),
    authForm: makeNodeComponent("authForm"),
    h4: makeNodeComponent("h4"),
    textInput: makeNodeComponent("textInput"),
    button: makeNodeComponent("button"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicAuthBox2
    internalVariantProps: PlasmicAuthBox2__VariantProps,
    internalArgProps: PlasmicAuthBox2__ArgProps
  }
);

export default PlasmicAuthBox2;
/* prettier-ignore-end */
